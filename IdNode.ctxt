#BlueJ class context
comment0.params=name\ id\ count\ books
comment0.target=IdNode(java.lang.String,\ java.lang.String,\ int,\ java.util.ArrayList)
comment0.text=\r\n\ Constructor\r\n\ @patam\ count\ -\ the\ number\ of\ books\ he\ has\r\n\ @patambooks-\ the\ books\ he\ has\r\n
comment1.params=root\ node
comment1.target=IdNode\ RBinsert(IdNode,\ IdNode)
comment1.text=\r\n\ RBinsert\ -\ insert\ a\ new\ node\ to\ the\ tree\r\n\ @patam\ node\ -\ a\ node\ insert\ to\ the\ RBtree\r\n
comment10.params=root\ node
comment10.target=IdNode\ RBdelete(IdNode,\ IdNode)
comment10.text=\r\n\ RBdelete\ -\ delete\ a\ node\ from\ the\ tree.\ Return\ the\ new\ root\ of\ the\ tree\ after\ the\ delete\r\n\ @param\ node-\ a\ node\ that\ we\ are\ deleting\ from\ the\ \r\n
comment11.params=root\ node\ nodeP
comment11.target=IdNode\ RBdeleteFix(IdNode,\ IdNode,\ IdNode)
comment11.text=\r\n\ RBdeleteFix\ -\ fix\ the\ tree\ after\ the\ delete\ and\ return\ the\ new\ root\ of\ the\ tree\r\n\ @param\ node-\ where\ the\ delete\ was\ done\r\n\ @param\ nodeP\ -\ the\ father\ of\ node.\ we\ send\ it\ to\ the\ method\ so\ we\ can\ know\ who\ the\ father\ is,\ if\ node\=null\r\n
comment12.params=node
comment12.target=java.lang.String\ getColor(IdNode)
comment13.params=color
comment13.target=void\ setColor(java.lang.String)
comment14.params=
comment14.target=IdNode\ getRight()
comment15.params=
comment15.target=IdNode\ getLeft()
comment16.params=
comment16.target=int\ getCount()
comment17.params=
comment17.target=java.util.ArrayList\ getBooks()
comment18.params=
comment18.target=java.lang.String\ getId()
comment19.params=
comment19.target=java.lang.String\ getName()
comment2.params=root\ node
comment2.target=IdNode\ RBinsertFix(IdNode,\ IdNode)
comment2.text=\r\n\ RBinsertFix\ -\ fix\ the\ tree\ after\ an\ insertion\r\n\ @param\ node-\ a\ node\ to\ insert\ to\ the\ RBtree\ \ \r\n
comment3.params=node
comment3.target=IdNode\ getSilbing(IdNode)
comment3.text=\r\n\ getSilbing\ -\ return\ the\ brother\ of\ the\ input\ node\r\n
comment4.params=node
comment4.target=IdNode\ getGrandparent(IdNode)
comment4.text=\r\n\ getGrandparent\ -\ return\ the\ Grandparent\ of\ the\ input\ node\ \r\n
comment5.params=root\ node
comment5.target=IdNode\ rightRotate(IdNode,\ IdNode)
comment5.text=\r\n\ rightRotate\ -\ rotate\ the\ tree\ right\ \r\n\ @param\ node-\ a\ node\ that\ we\ rotate\ right\ in\ the\ RBtree\ \ \r\n
comment6.params=root\ node
comment6.target=IdNode\ leftRotate(IdNode,\ IdNode)
comment6.text=\r\n\ leftRotate\ -\ rotate\ the\ tree\ left\r\n\ @param\ node-\ a\ node\ that\ we\ rotate\ left\ in\ the\ RBtree\ \ \r\n
comment7.params=root\ id
comment7.target=IdNode\ treeSearch(IdNode,\ java.lang.String)
comment7.text=\r\n\ treeSearch\ -\ search\ for\ a\ node\ in\ the\ tree.\ Return\ the\ node\ we\ are\ looking\ for\r\n\ @param\ id-\ the\ id\ of\ the\ client\ we\ are\ looking\ for\r\n
comment8.params=root
comment8.target=IdNode\ treeMinimum(IdNode)
comment8.text=\r\n\ treeMinimum\ -\ return\ the\ minimum\ of\ the\ tree\r\n
comment9.params=root\ node
comment9.target=IdNode\ treeSuccessor(IdNode,\ IdNode)
comment9.text=\r\n\ treeSuccessor\ -\ return\ the\ successor\ (by\ value)\ of\ the\ input\ node\r\n\ @param\ node-\ a\ node\ that\ we\ are\ looking\ for\ its\ successor\r\n
numComments=20
